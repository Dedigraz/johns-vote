datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  email               String?  @unique
  username            String?  @unique
  lastActiveTimestamp DateTime @default(now())
  isAdmin             Boolean  @default(false)

  paymentProcessorUserId        String?   @unique
  lemonSqueezyCustomerPortalUrl String? // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus            String? // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan              String? // 'hobby', 'pro'
  sendNewsletter                Boolean   @default(false)
  datePaid                      DateTime?
  credits                       Int       @default(3)

  gptResponses        GptResponse[]
  contactFormMessages ContactFormMessage[]
  tasks               Task[]
  files               File[]
  submissions         Submission[]
  Vote                Vote[]
}

model Submission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  title       String
  description String
  isPublished Boolean @default(false)
  votes       Int     @default(0)

  submissionGroup   SubmissionGroup? @relation(fields: [submissionGroupId], references: [id])
  submissionGroupId String?

  files          File[]
  Vote           Vote[]
  fileReferences Json? // Store file metadata as JSON
}

model Vote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String

  isUpvote Boolean

  isDownvote Boolean

  submissionGroup   SubmissionGroup? @relation(fields: [submissionGroupId], references: [id])
  submissionGroupId String?

  @@unique([userId, submissionId])
}

model SubmissionGroup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  winningSubmissionId String?

  title       String
  description String
  isPublished Boolean @default(false)

  isCompleted Boolean @default(false)
  isJudged    Boolean @default(false)

  submissions Submission[]
  Vote        Vote[]
}

model GptResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  description String
  time        String  @default("1")
  isDone      Boolean @default(false)
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name      String
  type      String
  key       String
  size      Int @default(0)
  uploadUrl String

  Submission   Submission? @relation(fields: [submissionId], references: [id])
  submissionId String?
}

model DailyStats {
  id   Int      @id @default(autoincrement())
  date DateTime @unique @default(now())

  totalViews                Int    @default(0)
  prevDayViewsChangePercent String @default("0")
  userCount                 Int    @default(0)
  paidUserCount             Int    @default(0)
  userDelta                 Int    @default(0)
  paidUserDelta             Int    @default(0)
  totalRevenue              Float  @default(0)
  totalProfit               Float  @default(0)

  sources PageViewSource[]
}

model PageViewSource {
  name String
  date DateTime @default(now())

  dailyStats   DailyStats? @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId Int?

  visitors Int

  @@id([date, name])
}

model Logs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  message String
  level   String
}

model ContactFormMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
}
